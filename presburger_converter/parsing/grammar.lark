?start: formula

?formula: implication

?implication: equivalence
             | equivalence "->" implication        -> implies

?equivalence: or_expr
             | or_expr "<->" equivalence           -> iff

?or_expr: and_expr
        | or_expr "OR" and_expr                    -> or_expr

?and_expr: not_expr
         | and_expr "AND" not_expr                 -> and_expr

?not_expr: "NOT" atom                              -> not_expr
         | atom

?atom: comparison
     | quantifier
     | "(" formula ")"                             -> parent

?quantifier: EX VAR "." formula                    -> ex_quantifier
            | ALL VAR "." formula                 -> all_quantifier

?comparison: term "<=" term                        -> leq
           | term "=" term                         -> eq
           | term "<" term                         -> less
           | term ">" term                         -> greater
           | term ">=" term                        -> greater_equal

?term: sum

?sum: product
    | sum "+" product                              -> add
    | sum "-" product                              -> sub

product: CONST VAR       -> mult
       | factor

?factor: "-" product        -> unary_minus
       | VAR                -> var
       | CONST              -> const
       | "(" term ")"       -> parent

EX: "EX" | "E"
ALL: "ALL" | "A"

VAR: /[a-z][a-z0-9_]*/i
CONST: /[0-9]+/

%import common.WS
%ignore WS
from presburger_converter.parsing.expander import expand_shorthands, eliminate_double_negation, process_syntax_tree
from presburger_converter.parsing.syntax_tree_visualizier import syntax_tree_to_dot
from presburger_converter.solutions import find_example_solutions

# ---------------------------------------------------------------------------
#  Add / remove Presburger formulas to test here.
# ---------------------------------------------------------------------------
FORMULAS = [
    "y = 3",
]

"EVEN(a) = E b. 2b = a\nODD(a) = NOT EVEN(a)\nx >= 7 AND ODD(x)"

MAX_SOLUTIONS = 5  # Number of candidate models/solutions to collect per formula

from presburger_converter.parsing import parser
from presburger_converter import formula_to_aut
from ast_to_z3 import to_z3
from solutions import find_unique_example_solutions, accepts_assignment
from z3_helpers import is_assignment_sat, solve_with_z3
from libmata import alphabets as alph, parser as p



"""Compare up to ``MAX_SOLUTIONS`` candidate assignments from Z3 with
those generated by the automaton.  Two-way consistency is required:

  • Z3 model ⇒ automaton must accept.
  • Automaton solution ⇒ Z3 must satisfy.

If either engine produces *no* solutions, the other must also produce none.
"""

formula = FORMULAS[0]  # For testing, use the first formula in the list
# ── Obtain candidates from both engines ───────────────────────────────
print(f"Testing formula: {formula!r}")
tree = parser.parse_formula(formula)
clean_tree = expand_shorthands(tree)
cleaned_tree = process_syntax_tree(tree)
print(syntax_tree_to_dot(tree, filename="syntax_tree"))
print(syntax_tree_to_dot(clean_tree, filename="clean_syntax_tree"))
print(syntax_tree_to_dot(cleaned_tree, filename="cleaned_syntax_tree"))
print(tree)
phi_z3 = to_z3(parser.parse_formula(formula))
print(f"Z3 formula for {formula!r}: {phi_z3}")
z3_models = solve_with_z3(phi_z3, max_solutions=MAX_SOLUTIONS)
print(f"Z3 models for formula {formula!r}: {z3_models}")
aut, variables = formula_to_aut(formula)
#mata = nfa_to_explicit_str(aut)
#save mata to file called test.mata in current directory
#with open("test.mata", "w") as f:
#    f.write(mata)
#alpha = alph.IntAlphabet()
#aut_new = p.from_mata("test.mata", alpha)
#print(aut_new.to_dot_str())
print(aut.to_dot_str())
#print("done")
aut_solutions = find_example_solutions(aut, 5, variables)
print(f"Automaton solutions for formula {formula!r}: {aut_solutions}")
# ── Empty-result agreement check ──────────────────────────────────────

